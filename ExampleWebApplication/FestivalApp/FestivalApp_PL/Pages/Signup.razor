@page "/signup"

<div class="sign-in-container">
    <img class="lines" src="/images/background.svg" alt="lines" />
    <div class="signin-card">
        <h2 class="title">Sign Up</h2>

        <!-- First & Last Name -->
        <div class="form-row">
            <div class="form-group half-width">
                <label class="label" for="firstName">First name</label>
                <input id="firstName"
                       class="input-field"
                       placeholder="Denis"
                       type="text"
                       @bind="signupModel.FirstName" />
            </div>
            <div class="form-group half-width">
                <label class="label" for="lastName">Last name</label>
                <input id="lastName"
                       class="input-field"
                       placeholder="Yusein"
                       type="text"
                       @bind="signupModel.LastName" />
            </div>
        </div>

        <!-- Email Field -->
        <div class="form-group">
            <label class="label" for="email">Email</label>
            <input id="email"
                   class="input-field"
                   placeholder="example@gmail.com"
                   type="email"
                   @bind="signupModel.Email"
                   @oninput="ValidateEmail" />
        </div>

        <!-- Password Field -->
        <div class="form-group password-group">
            <label class="label" for="password">Password</label>
            <div class="password-input-wrapper">
                <input id="password"
                       class="input-field password-field"
                       placeholder="********"
                       type="@passwordFieldType"
                       @bind="signupModel.Password"
                       @oninput="ValidatePassword" />

                <span class="toggle-visibility" @onclick="TogglePassword">
                    <img src="@CurrentEyeIcon" alt="Show/hide"/>
                </span>
            </div>

            <!-- Password Warning (Appears Below the Input) -->
            <p class="password-requirement"
               style="display: @(signupModel.Password.Length > 0 && signupModel.Password.Length < 8 ? "block" : "none")">
                • Must be at least 8 characters
            </p>
        </div>

        <!-- Error Message Box -->
        <div class="error-box" style="display: @(showErrors ? "block" : "none")">
            <p>@errorMessage</p>
        </div>

        <!-- Register As -->
        <p class="register-as-label">Register as</p>
        <div class="register-options">
            <button class="register-btn" @onclick="() => OnRegisterRoleSelected(Role.Guest)">Guest</button>
            <span class="or-text">or</span>
            <button class="register-btn" @onclick="() => OnRegisterRoleSelected(Role.Artist)">Artist</button>
        </div>

        <p class="signup-prompt">
            Already have an account?
            <a href="/signin">Sign in</a>
        </p>
    </div>
</div>

@code {
    private SignUpModel signupModel = new();
    private bool showPassword;
    private string passwordFieldType = "password";
    private bool showErrors;
    private string errorMessage = string.Empty;
    private bool isValidEmail = true;

    private string CurrentEyeIcon => showPassword
        ? "/icons/closed-eye-icon.svg"
        : "/icons/eye-icon.svg";

    private void TogglePassword()
    {
        showPassword = !showPassword;
        passwordFieldType = showPassword ? "text" : "password";
    }

    private void ValidateEmail(ChangeEventArgs e)
    {
        string email = e.Value?.ToString() ?? string.Empty;
        isValidEmail = System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        signupModel.Password = e.Value?.ToString() ?? string.Empty;
        StateHasChanged(); // Ensure UI updates on every input change
    }

    private void OnRegisterRoleSelected(Role role)
    {
        signupModel.SelectedRole = role;

        // Check if required fields are empty
        if (string.IsNullOrWhiteSpace(signupModel.FirstName) ||
            string.IsNullOrWhiteSpace(signupModel.LastName) ||
            string.IsNullOrWhiteSpace(signupModel.Email) ||
            string.IsNullOrWhiteSpace(signupModel.Password) ||
            !isValidEmail ||
            signupModel.Password.Length < 8)
        {
            showErrors = true;
            errorMessage = "Fields are empty or invalid.";
            return;
        }

        // If all fields are valid, hide error message
        showErrors = false;
        errorMessage = "";

        // Sign-up logic (e.g., API call)
    }

    private class SignUpModel
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public Role SelectedRole { get; set; }
    }

    private enum Role
    {
        None,
        Guest,
        Artist
    }
}
