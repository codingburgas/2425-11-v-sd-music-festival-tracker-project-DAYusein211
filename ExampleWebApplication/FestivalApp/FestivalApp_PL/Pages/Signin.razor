@page "/signin"

<div class="sign-in-container">
    <img class="lines" src="/images/background.svg" alt="lines" />
    <div class="signin-card">
        <h2 class="title">Sign In</h2>

        <!-- Email Field -->
        <div class="form-group">
            <label class="label" for="email">Email</label>
            <input id="email"
                   class="input-field"
                   placeholder="example@gmail.com"
                   type="email"
                   @bind="loginModel.Email"
                   @oninput="ValidateEmail" />
        </div>

        <!-- Password Field -->
        <div class="form-group password-group">
            <label class="label" for="password">Password</label>
            <div class="password-input-wrapper">
                <input id="password"
                       class="input-field password-field"
                       placeholder="********"
                       type="@passwordFieldType"
                       @bind="loginModel.Password" />

                <span class="toggle-visibility" @onclick="TogglePassword">
                    <img src="@CurrentEyeIcon" alt="Show/hide"/>
                </span>
            </div>
        </div>

        <!-- Error Message Box (Same as Sign-Up Page) -->
        <div class="error-box" style="display: @(showErrors ? "block" : "none")">
            <p>@errorMessage</p>
        </div>

        <!-- Sign In Button -->
        <button class="signin-btn" @onclick="OnSignIn">Sign In</button>

        <!-- Sign Up Link -->
        <p class="signup-prompt">
            Don’t have an account?
            <a href="/signup">Create now</a>
        </p>
    </div>
</div>

@code {
private LoginModel loginModel = new();
private bool showPassword;
private string passwordFieldType = "password";
private bool showErrors;
private string errorMessage = string.Empty;
private bool isValidEmail = true;

private string CurrentEyeIcon => showPassword
? "/icons/closed-eye-icon.svg"
: "/icons/eye-icon.svg";

private void TogglePassword()
{
showPassword = !showPassword;
passwordFieldType = showPassword ? "text" : "password";
}

private void ValidateEmail(ChangeEventArgs e)
{
string email = e.Value?.ToString() ?? string.Empty;
isValidEmail = System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
}

private void OnSignIn()
{
// Check for empty fields or invalid email
if (string.IsNullOrWhiteSpace(loginModel.Email) ||
string.IsNullOrWhiteSpace(loginModel.Password) ||
!isValidEmail)
{
showErrors = true;
errorMessage = "Fields are empty or invalid.";
return;
}

// Hide error messages when validation passes
showErrors = false;
errorMessage = "";

// TODO: Implement sign-in logic (API call, authentication, etc.)
}

private class LoginModel
{
public string Email { get; set; } = string.Empty;
public string Password { get; set; } = string.Empty;
}
}