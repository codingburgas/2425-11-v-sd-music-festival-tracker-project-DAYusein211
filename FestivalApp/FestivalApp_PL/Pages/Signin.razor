@page "/signin"
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject HttpClient httpClient
@inject ILocalStorageService LocalStorage

<div class="sign-in-container">
    <div class="lines" ><div class = "circle-bg"></div></div>
    <div class="signin-card">
        <h2 class="title">Sign In</h2>

        <!-- Email Field -->
        <div class="form-group">
            <label class="label" for="email">Email</label>
            <input id="email"
                   class="input-field"
                   placeholder="example@gmail.com"
                   type="email"
                   @bind="email"
                   @oninput="ValidateEmail" />
        </div>

        <!-- Password Field -->
        <div class="form-group password-group">
            <label class="label" for="password">Password</label>
            <div class="password-input-wrapper">
                <input id="password"
                       class="input-field password-field"
                       placeholder="********"
                       type="@passwordFieldType"
                       @bind="password" />

                <span class="toggle-visibility" @onclick="TogglePassword">
                    <img src="@CurrentEyeIcon" alt="Show/hide"/>
                </span>
            </div>
        </div>

        <!-- Error Message Box -->
        <div class="error-box" style="display: @(showErrors ? "block" : "none")">
            <p>@errorMessage</p>
        </div>

        <!-- Sign In Button -->
        <button class="signin-btn" @onclick="OnSignIn">Sign In</button>

        <!-- Sign Up Link -->
        <p class="signup-prompt">
            Don’t have an account?
            <a href="/signup">Create now</a>
        </p>
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private bool showErrors;
    private string errorMessage = string.Empty;
    private bool showPassword;
    private string passwordFieldType = "password";
    private bool isValidEmail = true;

    private string CurrentEyeIcon => showPassword ? "/icons/closed-eye-icon.svg" : "/icons/eye-icon.svg";

    private void TogglePassword()
    {
        showPassword = !showPassword;
        passwordFieldType = showPassword ? "text" : "password";
    }

    private void ValidateEmail(ChangeEventArgs e)
    {
        email = e.Value?.ToString() ?? string.Empty;
        isValidEmail = System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
    }

    private async Task OnSignIn()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            showErrors = true;
            errorMessage = "Email and password are required.";
            return;
        }

        var loginData = new { Email = email, Password = password };
        var response = await httpClient.PostAsJsonAsync("http://localhost:5238/api/auth/login", loginData);

        if (response.IsSuccessStatusCode)
        {
            var userInfo = await response.Content.ReadFromJsonAsync<UserInfo>();

            if (userInfo != null)
            {
                // Store user details INCLUDING the entered password
                await LocalStorage.SetItemAsync("loggedInUser", new UserInfo
                {
                    Id = userInfo.Id,
                    FirstName = userInfo.FirstName,
                    LastName = userInfo.LastName,
                    Email = userInfo.Email,
                    Role = userInfo.Role,
                    Rating = userInfo.Rating,
                    Password = password // Store the entered password
                });

                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
        else
        {
            showErrors = true;
            errorMessage = "Invalid email or password.";
        }
    }




    private class UserInfo
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty; // Guest or Artist
        public object Rating { get; set; }
        public string Password { get; set; }
    }
}
