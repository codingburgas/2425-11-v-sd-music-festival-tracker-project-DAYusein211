@page "/transactions"
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="concerts-page-container">
    <div class="concerts-header">
        <h1>Transactions</h1>

        <div class="concerts-back-button tr-back" @onclick="GoBack">
            <span class="concerts-back-icon">⬅</span> Back
        </div>
    </div>

    <div class="concerts-content tr">
        <div class="concerts-festival-list">
            @if (userTickets.Count == 0)
            {
                <p>No transactions found.</p>
            }
            else
            {
                @for (int i = 0; i < userTickets.Count; i++)
                {
                    var ticket = userTickets[i];
                    <div class="concerts-festival-card">
                        <div class="concerts-festival-date">
                            @( (i + 1).ToString("D2") ) 
                        </div>
                        <div class="concerts-festival-info">
                            <h3>@ticket.FestivalName - @ticket.ArtistName</h3>
                            <p>@ticket.FestivalLocation, @ticket.FestivalDate.ToString("MM-dd-yyyy")</p>
                            <span class="concerts-rating">Rating: @ticket.ArtistRating.ToString("0.00")/5</span>
                        </div>
                        <div class="concerts-festival-price">
                            @if (!ratedArtists.Contains(ticket.ArtistId))
                            {
                                <button class="concerts-get-btn" @onclick="() => OpenRatingModal(ticket.FestivalId, ticket.ArtistId)">RATE</button>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    @if (isRatingModalOpen)
    {
        <div class="rating-modal-overlay">
            <div class="rating-modal">
                <h2>Rating</h2>
                <input type="number" min="1" max="5" step="1" @bind="ratingValue" placeholder="Enter rating (1-5)" />
                <div class="rating-modal-actions">
                    <button class="rating-cancel-btn" @onclick="CloseRatingModal">Cancel</button>
                    <button class="rating-submit-btn" @onclick="SubmitRating">Done</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<TicketViewModel> userTickets = new();
    private HashSet<int> ratedArtists = new(); 
    private int loggedInUserId = 0;
    private bool isRatingModalOpen = false;
    private int selectedFestivalId;
    private int selectedArtistId;
    private int ratingValue = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await LocalStorage.GetItemAsync<UserInfo>("loggedInUser");
            if (user != null)
            {
                loggedInUserId = user.Id;

                
                if (user.Role == "Artist")
                {
                    Navigation.NavigateTo("/main", forceLoad: true);
                    return; 
                }
            }

         
            userTickets = await httpClient.GetFromJsonAsync<List<TicketViewModel>>($"http://localhost:5238/api/tickets/user/{loggedInUserId}");
            
            var storedRatings = await LocalStorage.GetItemAsync<HashSet<int>>("ratedArtists");
            if (storedRatings != null)
            {
                ratedArtists = storedRatings;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private void OpenRatingModal(int festivalId, int artistId)
    {
        selectedFestivalId = festivalId;
        selectedArtistId = artistId;
        ratingValue = 0; 
        isRatingModalOpen = true;
    }

    private void CloseRatingModal()
    {
        isRatingModalOpen = false;
    }

    private async Task SubmitRating()
    {
        if (ratingValue < 1 || ratingValue > 5)
        {
            Console.WriteLine("Invalid rating value.");
            return;
        }

        var updatedArtist = userTickets.FirstOrDefault(t => t.ArtistId == selectedArtistId);
        if (updatedArtist == null)
        {
            Console.WriteLine("Artist not found in UI.");
            return;
        }
        updatedArtist.ArtistRating = Math.Round((updatedArtist.ArtistRating + ratingValue) / 2.0, 2);

        var updateArtistRating = new ArtistRatingUpdateRequest
        {
            ArtistId = selectedArtistId,
            NewRating = ratingValue
        };

        try
        {
            Console.WriteLine($"Updating artist rating: {JsonSerializer.Serialize(updateArtistRating)}");

            var response = await httpClient.PutAsJsonAsync("http://localhost:5238/api/artists/rating", updateArtistRating);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Artist rating updated successfully!");
                
                ratedArtists.Add(selectedArtistId);
                await LocalStorage.SetItemAsync("ratedArtists", ratedArtists);
            }
            else
            {
                var errorBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to update artist rating: {errorBody}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating artist rating: {ex.Message}");
        }
        finally
        {
            isRatingModalOpen = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/main");
    }

    private class TicketViewModel
    {
        public int FestivalId { get; set; }
        public string FestivalName { get; set; } = string.Empty;
        public string FestivalLocation { get; set; } = string.Empty;
        public DateTime FestivalDate { get; set; }
        public int ArtistId { get; set; }
        public string ArtistName { get; set; } = string.Empty;
        public double ArtistRating { get; set; }
    }

    private class ArtistRatingUpdateRequest
    {
        public int ArtistId { get; set; }
        public int NewRating { get; set; }
    }

    private class UserInfo
    {
        public int Id { get; set; }
        public string Role { get; set; } = string.Empty;
    }
}
