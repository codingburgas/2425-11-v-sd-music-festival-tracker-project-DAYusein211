@page "/concerts"
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="concerts-page-container">
    <div class="concerts-header">
        <h1>Plan Your <span class="concerts-highlight">Perfect</span> Festival Day!</h1>
        <input type="text" class="concerts-search-input" placeholder="Search" @bind="searchQuery" @oninput="FilterFestivals" />
        <div class="concerts-back-button" @onclick="GoBack">
            <span class="concerts-back-icon">⬅</span> Back
        </div>
    </div>

    <div class="concerts-content">
        <div class="concerts-festival-list">
            @if (filteredFestivals.Count == 0)
            {
                <p></p>
            }
            else
            {
                @for (int i = 0; i < filteredFestivals.Count; i++)
                {
                    var festival = filteredFestivals[i];
                    <div class="concerts-festival-card">
                        <div class="concerts-festival-date">
                            @( (i + 1) < 10 ? $"0{i + 1}" : $"{i + 1}" )
                        </div>
                        <div class="concerts-festival-info">
                            <h3>@festival.Name - @festival.ArtistName</h3>
                            <p>@festival.Location @festival.Date.ToString("MM-dd-yyyy")</p>
                            <span class="concerts-rating">@festival.ArtistRating.ToString("0.00")/5 Rating</span>
                        </div>
                        <div class="concerts-festival-price">
                            <button class="concerts-get-btn" @onclick="() => BuyTicket(festival.Id)">BUY</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Festival> festivals = new();
    private List<Festival> filteredFestivals = new();
    private string searchQuery = "";
    private int loggedInUserId = 0;
    private string userRole = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await LocalStorage.GetItemAsync<UserInfo>("loggedInUser");
            if (user != null)
            {
                loggedInUserId = user.Id;
                userRole = user.Role;
                
                if (userRole == "Artist")
                {
                    Navigation.NavigateTo("/main", forceLoad: true);
                    return;
                }
            }

            var allFestivals = await httpClient.GetFromJsonAsync<List<Festival>>("http://localhost:5238/api/festivals");
            
            var userTickets = await httpClient.GetFromJsonAsync<List<Ticket>>($"http://localhost:5238/api/tickets/user/{loggedInUserId}");
            
            var purchasedFestivalIds = userTickets.Select(t => t.FestivalId).ToHashSet();

            festivals = allFestivals.Where(f => !purchasedFestivalIds.Contains(f.Id)).ToList();
            filteredFestivals = festivals;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading festivals: {ex.Message}");
        }
    }

    private void FilterFestivals(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        filteredFestivals = festivals
            .Where(f => f.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                        f.ArtistName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task BuyTicket(int festivalId)
    {
        if (loggedInUserId == 0)
        {
            Console.WriteLine("User is not logged in.");
            return;
        }

        var newTicket = new Ticket
        {
            GuestId = loggedInUserId,
            FestivalId = festivalId
        };

        try
        {
            var response = await httpClient.PostAsJsonAsync("http://localhost:5238/api/tickets", newTicket);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Ticket purchased successfully!");

                festivals.RemoveAll(f => f.Id == festivalId);
                filteredFestivals.RemoveAll(f => f.Id == festivalId);
            }
            else
            {
                var responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to purchase ticket: {responseBody}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error purchasing ticket: {ex.Message}");
        }
    }

    private class TicketRequest
    {
        public int GuestId { get; set; }
        public int FestivalId { get; set; }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/main");
    }

    private class Festival
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public int ArtistId { get; set; }
        public string ArtistName { get; set; } = string.Empty;
        public double ArtistRating { get; set; }
    }

    private class Ticket
    {
        public int GuestId { get; set; }
        public int FestivalId { get; set; }
    }

    private class UserInfo
    {
        public int Id { get; set; }
        public string Role { get; set; } = string.Empty;
    }
}
s