@page "/signup"
@inject NavigationManager Navigation


<div class="sign-in-container">
    <div class="lines" ><div class = "circle-bg"></div></div>
    <div class="signin-card">
        <h2 class="title">Sign Up</h2>
        
        <div class="form-row">
            <div class="form-group half-width">
                <label class="label" for="firstName">First name</label>
                <input id="firstName"
                       class="input-field"
                       placeholder="Denis"
                       type="text"
                       @bind="firstName" />
            </div>
            <div class="form-group half-width">
                <label class="label" for="lastName">Last name</label>
                <input id="lastName"
                       class="input-field"
                       placeholder="Yusein"
                       type="text"
                       @bind="lastName" />
            </div>
        </div>

        <div class="form-group">
            <label class="label" for="email">Email</label>
            <input id="email"
                   class="input-field"
                   placeholder="example@gmail.com"
                   type="email"
                   @bind="email"
                   @oninput="ValidateEmail" />
        </div>

        <div class="form-group password-group">
            <label class="label" for="password">Password</label>
            <div class="password-input-wrapper">
                <input id="password"
                       class="input-field password-field"
                       placeholder="********"
                       type="@passwordFieldType"
                       @bind="password"
                       @oninput="ValidatePassword" />

                <span class="toggle-visibility" @onclick="TogglePassword">
                    <img src="@CurrentEyeIcon" alt="Show/hide"/>
                </span>
            </div>

            <p class="password-requirement"
               style="display: @(password.Length > 0 && password.Length < 8 ? "block" : "none")">
                • Must be at least 8 characters
            </p>
        </div>

        <div class="error-box" style="display: @(showErrors ? "block" : "none")">
            <p>@errorMessage</p>
        </div>

        <p class="register-as-label">Register as</p>
        <div class="register-options">
            <button class="register-btn" @onclick='() => RegisterUser("Guest")'>Guest</button>
            <span class="or-text">or</span>
            <button class="register-btn" @onclick='() => RegisterUser("Artist")'>Artist</button>
        </div>

        <p class="signup-prompt">
            Already have an account?
            <a href="/signin">Sign in</a>
        </p>
    </div>
</div>

@code {
    private string firstName = string.Empty;
    private string lastName = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private bool showErrors;
    private string errorMessage = string.Empty;
    private bool showPassword;
    private string passwordFieldType = "password";
    private bool isValidEmail = true;
    private HttpClient httpClient = new();

    private string CurrentEyeIcon => showPassword ? "/icons/closed-eye-icon.svg" : "/icons/eye-icon.svg";

    protected override void OnInitialized()
    {
        httpClient.BaseAddress = new Uri("http://localhost:5238/api/"); 
    }

    private void TogglePassword()
    {
        showPassword = !showPassword;
        passwordFieldType = showPassword ? "text" : "password";
    }

    private void ValidateEmail(ChangeEventArgs e)
    {
        email = e.Value?.ToString() ?? string.Empty;
        isValidEmail = System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        password = e.Value?.ToString() ?? string.Empty;
        StateHasChanged(); 
    }

    private async Task RegisterUser(string role)
    {
        Console.WriteLine($"Attempting to register as {role}...");

        if (string.IsNullOrWhiteSpace(firstName) ||
            string.IsNullOrWhiteSpace(lastName) ||
            string.IsNullOrWhiteSpace(email) ||
            string.IsNullOrWhiteSpace(password) ||
            password.Length < 8 ||
            !isValidEmail)
        {
            showErrors = true;
            errorMessage = "Fields are empty or invalid.";
            Console.WriteLine("Validation failed.");
            return;
        }

        showErrors = false;
        errorMessage = "";

        var userData = new
        {
            FirstName = firstName,
            LastName = lastName,
            Email = email,
            PasswordHash = password
        };

        string endpoint = role == "Guest" ? "Guests" : "Artists";
        Console.WriteLine($"Sending request to: {httpClient.BaseAddress}{endpoint}");

        try
        {
            var response = await httpClient.PostAsJsonAsync(endpoint, userData);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"{role} registered successfully!");
                errorMessage = $"{role} registered successfully!";
                await Task.Delay(2000);

               
                Navigation.NavigateTo("/signin", forceLoad: true);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict) 
            {
                showErrors = true;
                errorMessage = "User with this email already exists.";
                Console.WriteLine("Registration failed: User already exists.");
            }
            else
            {
                showErrors = true;
                errorMessage = $"Error registering user: {await response.Content.ReadAsStringAsync()}";
                Console.WriteLine($"Registration failed: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred: {ex.Message}");
            showErrors = true;
            errorMessage = "An error occurred while registering.";
        }
    }

}
